//http://www.shaderslab.com/demo-74---2d-perlin-noise.html

//#pragma kernel PerlinNoise2DArray
#pragma kernel PerlinNoise2DTex

RWTexture2D< float4 > resultTex;
RWStructuredBuffer<float> resultBuf;

float width, height;

float2 seed;

float frequency;
float octaves;
float lacunarity;
float persistence;

float4 permute(float4 x)
{
	return fmod(34.0 * pow(x, 2) + x, 289.0);
}

float2 fade(float2 t) {
	return 6.0 * pow(t, 5.0) - 15.0 * pow(t, 4.0) + 10.0 * pow(t, 3.0);
}

float4 taylorInvSqrt(float4 r) {
	return 1.79284291400159 - 0.85373472095314 * r;
}

#define DIV_289 0.00346020761245674740484429065744f

float mod289(float x) {
	return x - floor(x * DIV_289) * 289.0;
}

float PerlinNoise2D(float2 P)
{
	float4 Pi = floor(P.xyxy) + float4(0.0, 0.0, 1.0, 1.0);
	float4 Pf = frac(P.xyxy) - float4(0.0, 0.0, 1.0, 1.0);

	float4 ix = Pi.xzxz;
	float4 iy = Pi.yyww;
	float4 fx = Pf.xzxz;
	float4 fy = Pf.yyww;

	float4 i = permute(permute(ix) + iy);

	float4 gx = frac(i / 41.0) * 2.0 - 1.0;
	float4 gy = abs(gx) - 0.5;
	float4 tx = floor(gx + 0.5);
	gx = gx - tx;

	float2 g00 = float2(gx.x, gy.x);
	float2 g10 = float2(gx.y, gy.y);
	float2 g01 = float2(gx.z, gy.z);
	float2 g11 = float2(gx.w, gy.w);

	float4 norm = taylorInvSqrt(float4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11)));
	g00 *= norm.x;
	g01 *= norm.y;
	g10 *= norm.z;
	g11 *= norm.w;

	float n00 = dot(g00, float2(fx.x, fy.x));
	float n10 = dot(g10, float2(fx.y, fy.y));
	float n01 = dot(g01, float2(fx.z, fy.z));
	float n11 = dot(g11, float2(fx.w, fy.w));

	float2 fade_xy = fade(Pf.xy);
	float2 n_x = lerp(float2(n00, n01), float2(n10, n11), fade_xy.x);
	float n_xy = lerp(n_x.x, n_x.y, fade_xy.y);
	return (n_xy * 1.2f) + 0.5f;//Unityと大体同じ値
}

float OctavePerlinNoise2D(float2 p)
{
	float amplitude = 1.0f;
	float range = 1.0f;
	float freq = frequency;
	float samp = PerlinNoise2D(p* freq);
	for (int o = 0; o < octaves; ++o)
	{
		samp += PerlinNoise2D(p * freq) * amplitude;
		freq *= lacunarity;
		amplitude *= persistence;
		range += amplitude;
	}
	return samp / range;
}


//[numthreads(1,1,1)]
//void PerlinNoise2DArray(uint3 id : SV_DispatchThreadID)
//{
//	resultTex.GetDimensions(width, height);
//
//	float2 c = float2(id.x / width, id.y / height);
//
//	float pn = OctavePerlinNoise2D(c);
//
//	int index = id.y * width + id.x;
//	resultBuf[index] = pn;
//}

[numthreads(8, 8, 1)]
void PerlinNoise2DTex(uint2 id : SV_DispatchThreadID)
{
	resultTex.GetDimensions(width, height);

	float2 c = float2(id.x / width, id.y / height);

	float pn = OctavePerlinNoise2D(c);

	resultTex[id] = float4(pn,pn,pn,1);
}
