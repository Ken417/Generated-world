#pragma kernel CSMain

RWStructuredBuffer<float> result;

float width, height;

const float PI = 3.141592653589793238462;

float2 rand2(float2 st) {
	st = float2(dot(st, float2(127.1, 311.7)),
		dot(st, float2(269.5, 183.3)));
	return -1.0 + 2.0 * frac(sin(st) * 43758.5453123);
}

float rand(float2 co) { return frac(sin(dot(co.xy, float2(12.9898, 78.233))) * 43758.5453); }

float perlinNoise(float2 st)
{
	float2 p = floor(st);
	float2 f = frac(st);
	float2 u = f * f * (3.0 - 2.0 * f);

	float v00 = rand2(p + float2(0, 0));
	float v10 = rand2(p + float2(1, 0));
	float v01 = rand2(p + float2(0, 1));
	float v11 = rand2(p + float2(1, 1));

	return lerp(lerp(dot(v00, f - float2(0, 0)), dot(v10, f - float2(1, 0)), u.x), lerp(dot(v01, f - float2(0, 1)), dot(v11, f - float2(1, 1)), u.x), u.y) + 0.5f;
}


[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	float2 c = float2(id.x / width, id.y / height);

	float f = perlinNoise(c);

	int index = id.y * width + id.x;
	result[index] = f;
}
